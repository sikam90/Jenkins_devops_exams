pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        GITHUB_CREDENTIALS = credentials('github-credentials')
        KUBECONFIG = credentials('kubeconfig')
        DOCKER_REPO = "sikam"
        SERVICES = "cast-service,movie-service,nginx"  // changer la liste en chaîne
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/sikam90/Jenkins_devops_exams.git'
            }
        }

        stage('Build images') {
            steps {
                script {
                    def servicesList = env.SERVICES.split(',')
                    servicesList.each { service ->
                        echo "Build Docker image for ${service}"
                        docker.build("${DOCKER_REPO}/${service}:latest", "./${service}")
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'Exécution des tests unitaires...'
                script {
                    def servicesList = env.SERVICES.split(',')
                    servicesList.findAll { it != 'nginx' }.each { service ->
                        sh "./${service}/run-unit-tests.sh"
                    }
                }
            }
        }

        stage('Acceptance Tests') {
            steps {
                echo 'Exécution des tests d’acceptation...'
                sh './tests/acceptance/run-acceptance-tests.sh'
            }
        }

        stage('Push images') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        def servicesList = env.SERVICES.split(',')
                        servicesList.each { service ->
                            echo "Push Docker image for ${service}"
                            docker.image("${DOCKER_REPO}/${service}:latest").push()
                        }
                    }
                }
            }
        }

        stage('Deploy to Qualification Environment') {
            steps {
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    echo "Déploiement dans l'environnement qualification"
                    sh 'kubectl apply -f k8s/qualification/'
                }
            }
        }

        stage('Deploy to Testing Environment') {
            steps {
                input message: 'Valider le déploiement dans l’environnement testing ?', ok: 'Déployer'
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    echo "Déploiement dans l'environnement testing"
                    sh 'kubectl apply -f k8s/testing/'
                }
            }
        }

        stage('Deploy to Production Environment') {
            steps {
                input message: 'Valider le déploiement en production ?', ok: 'Déployer'
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    echo "Déploiement dans l'environnement production"
                    sh 'kubectl apply -f k8s/production/'
                }
            }
        }
    }

    post {
        always {
            echo 'Nettoyage des ressources Docker temporaires...'
            sh 'docker system prune -f || true'
        }
        success {
            echo 'Pipeline terminé avec succès !'
        }
        failure {
            echo 'Pipeline échoué. Veuillez vérifier les logs.'
        }
    }
}
